/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.pullrequests.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.pullrequests.Aa07PrVoting;
import me.aa07.paradise.taskdaemon.database.pullrequests.Indexes;
import me.aa07.paradise.taskdaemon.database.pullrequests.Keys;
import me.aa07.paradise.taskdaemon.database.pullrequests.enums.VotesVoteType;
import me.aa07.paradise.taskdaemon.database.pullrequests.enums.VotesVotingGroup;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.records.VotesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Votes extends TableImpl<VotesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>aa07_pr_voting.votes</code>
     */
    public static final Votes VOTES = new Votes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VotesRecord> getRecordType() {
        return VotesRecord.class;
    }

    /**
     * The column <code>aa07_pr_voting.votes.id</code>.
     */
    public final TableField<VotesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>aa07_pr_voting.votes.voting_member_fuid</code>.
     */
    public final TableField<VotesRecord, Integer> VOTING_MEMBER_FUID = createField(DSL.name("voting_member_fuid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>aa07_pr_voting.votes.pr_number</code>.
     */
    public final TableField<VotesRecord, Integer> PR_NUMBER = createField(DSL.name("pr_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>aa07_pr_voting.votes.voting_group</code>.
     */
    public final TableField<VotesRecord, VotesVotingGroup> VOTING_GROUP = createField(DSL.name("voting_group"), SQLDataType.VARCHAR(5).nullable(false).asEnumDataType(me.aa07.paradise.taskdaemon.database.pullrequests.enums.VotesVotingGroup.class), this, "");

    /**
     * The column <code>aa07_pr_voting.votes.vote_type</code>.
     */
    public final TableField<VotesRecord, VotesVoteType> VOTE_TYPE = createField(DSL.name("vote_type"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(me.aa07.paradise.taskdaemon.database.pullrequests.enums.VotesVoteType.class), this, "");

    /**
     * The column <code>aa07_pr_voting.votes.created</code>.
     */
    public final TableField<VotesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    private Votes(Name alias, Table<VotesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Votes(Name alias, Table<VotesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>aa07_pr_voting.votes</code> table reference
     */
    public Votes(String alias) {
        this(DSL.name(alias), VOTES);
    }

    /**
     * Create an aliased <code>aa07_pr_voting.votes</code> table reference
     */
    public Votes(Name alias) {
        this(alias, VOTES);
    }

    /**
     * Create a <code>aa07_pr_voting.votes</code> table reference
     */
    public Votes() {
        this(DSL.name("votes"), null);
    }

    public <O extends Record> Votes(Table<O> child, ForeignKey<O, VotesRecord> key) {
        super(child, key, VOTES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Aa07PrVoting.AA07_PR_VOTING;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VOTES_PR_NUMBER_FK3, Indexes.VOTES_VOTING_MEMBER_FUID_FK1);
    }

    @Override
    public Identity<VotesRecord, Integer> getIdentity() {
        return (Identity<VotesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<VotesRecord> getPrimaryKey() {
        return Keys.KEY_VOTES_PRIMARY;
    }

    @Override
    public List<ForeignKey<VotesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VOTES_IBFK_2, Keys.VOTES_IBFK_1);
    }

    private transient MemberCache _memberCache;
    private transient Prs _prs;

    public MemberCache memberCache() {
        if (_memberCache == null)
            _memberCache = new MemberCache(this, Keys.VOTES_IBFK_2);

        return _memberCache;
    }

    public Prs prs() {
        if (_prs == null)
            _prs = new Prs(this, Keys.VOTES_IBFK_1);

        return _prs;
    }

    @Override
    public Votes as(String alias) {
        return new Votes(DSL.name(alias), this);
    }

    @Override
    public Votes as(Name alias) {
        return new Votes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Votes rename(String name) {
        return new Votes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Votes rename(Name name) {
        return new Votes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, VotesVotingGroup, VotesVoteType, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
