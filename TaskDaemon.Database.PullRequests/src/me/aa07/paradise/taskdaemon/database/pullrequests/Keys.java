/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.pullrequests;


import me.aa07.paradise.taskdaemon.database.pullrequests.tables.MemberCache;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.Notes;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.Prs;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.TmRequests;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.Votes;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.VotesNew;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.records.MemberCacheRecord;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.records.NotesRecord;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.records.PrsRecord;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.records.TmRequestsRecord;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.records.VotesNewRecord;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.records.VotesRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * aa07_pr_voting.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<MemberCacheRecord> KEY_MEMBER_CACHE_PRIMARY = Internal.createUniqueKey(MemberCache.MEMBER_CACHE, DSL.name("KEY_member_cache_PRIMARY"), new TableField[] { MemberCache.MEMBER_CACHE.FUID }, true);
    public static final UniqueKey<NotesRecord> KEY_NOTES_PRIMARY = Internal.createUniqueKey(Notes.NOTES, DSL.name("KEY_notes_PRIMARY"), new TableField[] { Notes.NOTES.ID }, true);
    public static final UniqueKey<PrsRecord> KEY_PRS_PR_NUMBER = Internal.createUniqueKey(Prs.PRS, DSL.name("KEY_prs_pr_number"), new TableField[] { Prs.PRS.PR_NUMBER }, true);
    public static final UniqueKey<PrsRecord> KEY_PRS_PRIMARY = Internal.createUniqueKey(Prs.PRS, DSL.name("KEY_prs_PRIMARY"), new TableField[] { Prs.PRS.ID }, true);
    public static final UniqueKey<TmRequestsRecord> KEY_TM_REQUESTS_PRIMARY = Internal.createUniqueKey(TmRequests.TM_REQUESTS, DSL.name("KEY_tm_requests_PRIMARY"), new TableField[] { TmRequests.TM_REQUESTS.ID }, true);
    public static final UniqueKey<VotesRecord> KEY_VOTES_PRIMARY = Internal.createUniqueKey(Votes.VOTES, DSL.name("KEY_votes_PRIMARY"), new TableField[] { Votes.VOTES.ID }, true);
    public static final UniqueKey<VotesNewRecord> KEY_VOTES_NEW_ENFORCE_UNIQUE_VOTES = Internal.createUniqueKey(VotesNew.VOTES_NEW, DSL.name("KEY_votes_new_enforce_unique_votes"), new TableField[] { VotesNew.VOTES_NEW.VOTING_MEMBER_FUID, VotesNew.VOTES_NEW.PR_NUMBER, VotesNew.VOTES_NEW.VOTING_GROUP, VotesNew.VOTES_NEW.VOTE_TYPE }, true);
    public static final UniqueKey<VotesNewRecord> KEY_VOTES_NEW_PRIMARY = Internal.createUniqueKey(VotesNew.VOTES_NEW, DSL.name("KEY_votes_new_PRIMARY"), new TableField[] { VotesNew.VOTES_NEW.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<NotesRecord, MemberCacheRecord> NOTING_MEMBER_FUID_FK1 = Internal.createForeignKey(Notes.NOTES, DSL.name("noting_member_fuid_FK1"), new TableField[] { Notes.NOTES.NOTING_MEMBER_FUID }, Keys.KEY_MEMBER_CACHE_PRIMARY, new TableField[] { MemberCache.MEMBER_CACHE.FUID }, true);
    public static final ForeignKey<NotesRecord, PrsRecord> PR_NUMBER_FK1 = Internal.createForeignKey(Notes.NOTES, DSL.name("pr_number_FK1"), new TableField[] { Notes.NOTES.PR_NUMBER }, Keys.KEY_PRS_PR_NUMBER, new TableField[] { Prs.PRS.PR_NUMBER }, true);
    public static final ForeignKey<TmRequestsRecord, PrsRecord> PR_NUMBER_FK2 = Internal.createForeignKey(TmRequests.TM_REQUESTS, DSL.name("pr_number_FK2"), new TableField[] { TmRequests.TM_REQUESTS.PR_NUMBER }, Keys.KEY_PRS_PR_NUMBER, new TableField[] { Prs.PRS.PR_NUMBER }, true);
    public static final ForeignKey<TmRequestsRecord, MemberCacheRecord> REQUESTING_MEMBER_FUID_FK1 = Internal.createForeignKey(TmRequests.TM_REQUESTS, DSL.name("requesting_member_fuid_FK1"), new TableField[] { TmRequests.TM_REQUESTS.REQUESTING_MEMBER_FUID }, Keys.KEY_MEMBER_CACHE_PRIMARY, new TableField[] { MemberCache.MEMBER_CACHE.FUID }, true);
    public static final ForeignKey<VotesRecord, PrsRecord> VOTES_IBFK_1 = Internal.createForeignKey(Votes.VOTES, DSL.name("votes_ibfk_1"), new TableField[] { Votes.VOTES.PR_NUMBER }, Keys.KEY_PRS_PR_NUMBER, new TableField[] { Prs.PRS.PR_NUMBER }, true);
    public static final ForeignKey<VotesRecord, MemberCacheRecord> VOTES_IBFK_2 = Internal.createForeignKey(Votes.VOTES, DSL.name("votes_ibfk_2"), new TableField[] { Votes.VOTES.VOTING_MEMBER_FUID }, Keys.KEY_MEMBER_CACHE_PRIMARY, new TableField[] { MemberCache.MEMBER_CACHE.FUID }, true);
    public static final ForeignKey<VotesNewRecord, PrsRecord> PR_NUMBER_FK3 = Internal.createForeignKey(VotesNew.VOTES_NEW, DSL.name("pr_number_FK3"), new TableField[] { VotesNew.VOTES_NEW.PR_NUMBER }, Keys.KEY_PRS_PR_NUMBER, new TableField[] { Prs.PRS.PR_NUMBER }, true);
    public static final ForeignKey<VotesNewRecord, MemberCacheRecord> VOTING_MEMBER_FUID_FK1 = Internal.createForeignKey(VotesNew.VOTES_NEW, DSL.name("voting_member_fuid_FK1"), new TableField[] { VotesNew.VOTES_NEW.VOTING_MEMBER_FUID }, Keys.KEY_MEMBER_CACHE_PRIMARY, new TableField[] { MemberCache.MEMBER_CACHE.FUID }, true);
}
