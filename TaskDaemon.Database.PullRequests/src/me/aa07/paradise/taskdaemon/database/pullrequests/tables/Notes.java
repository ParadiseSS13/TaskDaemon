/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.pullrequests.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.pullrequests.Aa07PrVoting;
import me.aa07.paradise.taskdaemon.database.pullrequests.Keys;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.records.NotesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notes extends TableImpl<NotesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>aa07_pr_voting.notes</code>
     */
    public static final Notes NOTES = new Notes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotesRecord> getRecordType() {
        return NotesRecord.class;
    }

    /**
     * The column <code>aa07_pr_voting.notes.id</code>.
     */
    public final TableField<NotesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>aa07_pr_voting.notes.noting_member_fuid</code>.
     */
    public final TableField<NotesRecord, Integer> NOTING_MEMBER_FUID = createField(DSL.name("noting_member_fuid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>aa07_pr_voting.notes.pr_number</code>.
     */
    public final TableField<NotesRecord, Integer> PR_NUMBER = createField(DSL.name("pr_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>aa07_pr_voting.notes.note_text</code>.
     */
    public final TableField<NotesRecord, String> NOTE_TEXT = createField(DSL.name("note_text"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>aa07_pr_voting.notes.created</code>.
     */
    public final TableField<NotesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    private Notes(Name alias, Table<NotesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notes(Name alias, Table<NotesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>aa07_pr_voting.notes</code> table reference
     */
    public Notes(String alias) {
        this(DSL.name(alias), NOTES);
    }

    /**
     * Create an aliased <code>aa07_pr_voting.notes</code> table reference
     */
    public Notes(Name alias) {
        this(alias, NOTES);
    }

    /**
     * Create a <code>aa07_pr_voting.notes</code> table reference
     */
    public Notes() {
        this(DSL.name("notes"), null);
    }

    public <O extends Record> Notes(Table<O> child, ForeignKey<O, NotesRecord> key) {
        super(child, key, NOTES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Aa07PrVoting.AA07_PR_VOTING;
    }

    @Override
    public Identity<NotesRecord, Integer> getIdentity() {
        return (Identity<NotesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotesRecord> getPrimaryKey() {
        return Keys.KEY_NOTES_PRIMARY;
    }

    @Override
    public List<ForeignKey<NotesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTING_MEMBER_FUID_FK1, Keys.PR_NUMBER_FK1);
    }

    private transient MemberCache _memberCache;
    private transient Prs _prs;

    public MemberCache memberCache() {
        if (_memberCache == null)
            _memberCache = new MemberCache(this, Keys.NOTING_MEMBER_FUID_FK1);

        return _memberCache;
    }

    public Prs prs() {
        if (_prs == null)
            _prs = new Prs(this, Keys.PR_NUMBER_FK1);

        return _prs;
    }

    @Override
    public Notes as(String alias) {
        return new Notes(DSL.name(alias), this);
    }

    @Override
    public Notes as(Name alias) {
        return new Notes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notes rename(String name) {
        return new Notes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notes rename(Name name) {
        return new Notes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
