/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.pullrequests.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.pullrequests.Aa07PrVoting;
import me.aa07.paradise.taskdaemon.database.pullrequests.Indexes;
import me.aa07.paradise.taskdaemon.database.pullrequests.Keys;
import me.aa07.paradise.taskdaemon.database.pullrequests.enums.PrsPrStatus;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.records.PrsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Prs extends TableImpl<PrsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>aa07_pr_voting.prs</code>
     */
    public static final Prs PRS = new Prs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PrsRecord> getRecordType() {
        return PrsRecord.class;
    }

    /**
     * The column <code>aa07_pr_voting.prs.id</code>.
     */
    public final TableField<PrsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>aa07_pr_voting.prs.pr_number</code>.
     */
    public final TableField<PrsRecord, Integer> PR_NUMBER = createField(DSL.name("pr_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>aa07_pr_voting.prs.pr_name</code>.
     */
    public final TableField<PrsRecord, String> PR_NAME = createField(DSL.name("pr_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>aa07_pr_voting.prs.pr_type</code>.
     */
    public final TableField<PrsRecord, String> PR_TYPE = createField(DSL.name("pr_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>aa07_pr_voting.prs.date_opened</code>.
     */
    public final TableField<PrsRecord, LocalDateTime> DATE_OPENED = createField(DSL.name("date_opened"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>aa07_pr_voting.prs.pr_status</code>.
     */
    public final TableField<PrsRecord, PrsPrStatus> PR_STATUS = createField(DSL.name("pr_status"), SQLDataType.VARCHAR(6).nullable(false).defaultValue(DSL.inline("'OPEN'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.pullrequests.enums.PrsPrStatus.class), this, "");

    /**
     * The column <code>aa07_pr_voting.prs.pr_types</code>.
     */
    public final TableField<PrsRecord, String> PR_TYPES = createField(DSL.name("pr_types"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.inline("'[]'", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>aa07_pr_voting.prs.author_id</code>.
     */
    public final TableField<PrsRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("NULL", SQLDataType.BIGINT)), this, "");

    private Prs(Name alias, Table<PrsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Prs(Name alias, Table<PrsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>aa07_pr_voting.prs</code> table reference
     */
    public Prs(String alias) {
        this(DSL.name(alias), PRS);
    }

    /**
     * Create an aliased <code>aa07_pr_voting.prs</code> table reference
     */
    public Prs(Name alias) {
        this(alias, PRS);
    }

    /**
     * Create a <code>aa07_pr_voting.prs</code> table reference
     */
    public Prs() {
        this(DSL.name("prs"), null);
    }

    public <O extends Record> Prs(Table<O> child, ForeignKey<O, PrsRecord> key) {
        super(child, key, PRS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Aa07PrVoting.AA07_PR_VOTING;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PRS_PR_STATUS);
    }

    @Override
    public Identity<PrsRecord, Integer> getIdentity() {
        return (Identity<PrsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PrsRecord> getPrimaryKey() {
        return Keys.KEY_PRS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PrsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PRS_PR_NUMBER);
    }

    @Override
    public Prs as(String alias) {
        return new Prs(DSL.name(alias), this);
    }

    @Override
    public Prs as(Name alias) {
        return new Prs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Prs rename(String name) {
        return new Prs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prs rename(Name name) {
        return new Prs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, String, LocalDateTime, PrsPrStatus, String, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
