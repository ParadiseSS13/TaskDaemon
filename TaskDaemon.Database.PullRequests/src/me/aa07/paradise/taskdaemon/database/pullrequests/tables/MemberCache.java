/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.pullrequests.tables;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.database.pullrequests.Aa07PrVoting;
import me.aa07.paradise.taskdaemon.database.pullrequests.Keys;
import me.aa07.paradise.taskdaemon.database.pullrequests.tables.records.MemberCacheRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MemberCache extends TableImpl<MemberCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>aa07_pr_voting.member_cache</code>
     */
    public static final MemberCache MEMBER_CACHE = new MemberCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberCacheRecord> getRecordType() {
        return MemberCacheRecord.class;
    }

    /**
     * The column <code>aa07_pr_voting.member_cache.fuid</code>.
     */
    public final TableField<MemberCacheRecord, Integer> FUID = createField(DSL.name("fuid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>aa07_pr_voting.member_cache.username</code>.
     */
    public final TableField<MemberCacheRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>aa07_pr_voting.member_cache.last_seen</code>.
     */
    public final TableField<MemberCacheRecord, LocalDateTime> LAST_SEEN = createField(DSL.name("last_seen"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");

    private MemberCache(Name alias, Table<MemberCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private MemberCache(Name alias, Table<MemberCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>aa07_pr_voting.member_cache</code> table
     * reference
     */
    public MemberCache(String alias) {
        this(DSL.name(alias), MEMBER_CACHE);
    }

    /**
     * Create an aliased <code>aa07_pr_voting.member_cache</code> table
     * reference
     */
    public MemberCache(Name alias) {
        this(alias, MEMBER_CACHE);
    }

    /**
     * Create a <code>aa07_pr_voting.member_cache</code> table reference
     */
    public MemberCache() {
        this(DSL.name("member_cache"), null);
    }

    public <O extends Record> MemberCache(Table<O> child, ForeignKey<O, MemberCacheRecord> key) {
        super(child, key, MEMBER_CACHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Aa07PrVoting.AA07_PR_VOTING;
    }

    @Override
    public UniqueKey<MemberCacheRecord> getPrimaryKey() {
        return Keys.KEY_MEMBER_CACHE_PRIMARY;
    }

    @Override
    public MemberCache as(String alias) {
        return new MemberCache(DSL.name(alias), this);
    }

    @Override
    public MemberCache as(Name alias) {
        return new MemberCache(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberCache rename(String name) {
        return new MemberCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberCache rename(Name name) {
        return new MemberCache(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
