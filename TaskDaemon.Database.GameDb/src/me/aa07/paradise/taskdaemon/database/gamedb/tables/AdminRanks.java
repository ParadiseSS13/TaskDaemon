/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.gamedb.Indexes;
import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.AdminRanksRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminRanks extends TableImpl<AdminRanksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.admin_ranks</code>
     */
    public static final AdminRanks ADMIN_RANKS = new AdminRanks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminRanksRecord> getRecordType() {
        return AdminRanksRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.admin_ranks.id</code>.
     */
    public final TableField<AdminRanksRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_gamedb.admin_ranks.name</code>.
     */
    public final TableField<AdminRanksRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.admin_ranks.default_permissions</code>.
     */
    public final TableField<AdminRanksRecord, Integer> DEFAULT_PERMISSIONS = createField(DSL.name("default_permissions"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private AdminRanks(Name alias, Table<AdminRanksRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminRanks(Name alias, Table<AdminRanksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.admin_ranks</code> table
     * reference
     */
    public AdminRanks(String alias) {
        this(DSL.name(alias), ADMIN_RANKS);
    }

    /**
     * Create an aliased <code>paradise_gamedb.admin_ranks</code> table
     * reference
     */
    public AdminRanks(Name alias) {
        this(alias, ADMIN_RANKS);
    }

    /**
     * Create a <code>paradise_gamedb.admin_ranks</code> table reference
     */
    public AdminRanks() {
        this(DSL.name("admin_ranks"), null);
    }

    public <O extends Record> AdminRanks(Table<O> child, ForeignKey<O, AdminRanksRecord> key) {
        super(child, key, ADMIN_RANKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ADMIN_RANKS_NAME);
    }

    @Override
    public Identity<AdminRanksRecord, Integer> getIdentity() {
        return (Identity<AdminRanksRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AdminRanksRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_RANKS_PRIMARY;
    }

    @Override
    public AdminRanks as(String alias) {
        return new AdminRanks(DSL.name(alias), this);
    }

    @Override
    public AdminRanks as(Name alias) {
        return new AdminRanks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminRanks rename(String name) {
        return new AdminRanks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminRanks rename(Name name) {
        return new AdminRanks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
