/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.gamedb.Indexes;
import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.enums.Player_2faStatus;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.PlayerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Player extends TableImpl<PlayerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.player</code>
     */
    public static final Player PLAYER = new Player();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerRecord> getRecordType() {
        return PlayerRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.player.id</code>.
     */
    public final TableField<PlayerRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_gamedb.player.ckey</code>.
     */
    public final TableField<PlayerRecord, String> CKEY = createField(DSL.name("ckey"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.player.firstseen</code>.
     */
    public final TableField<PlayerRecord, LocalDateTime> FIRSTSEEN = createField(DSL.name("firstseen"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.player.lastseen</code>.
     */
    public final TableField<PlayerRecord, LocalDateTime> LASTSEEN = createField(DSL.name("lastseen"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.player.ip</code>.
     */
    public final TableField<PlayerRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(18).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.player.computerid</code>.
     */
    public final TableField<PlayerRecord, String> COMPUTERID = createField(DSL.name("computerid"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.player.ooccolor</code>.
     */
    public final TableField<PlayerRecord, String> OOCCOLOR = createField(DSL.name("ooccolor"), SQLDataType.VARCHAR(7).defaultValue(DSL.inline("'#b82e00'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_gamedb.player.UI_style</code>.
     */
    public final TableField<PlayerRecord, String> UI_STYLE = createField(DSL.name("UI_style"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("'Midnight'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_gamedb.player.UI_style_color</code>.
     */
    public final TableField<PlayerRecord, String> UI_STYLE_COLOR = createField(DSL.name("UI_style_color"), SQLDataType.VARCHAR(7).defaultValue(DSL.inline("'#ffffff'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_gamedb.player.UI_style_alpha</code>.
     */
    public final TableField<PlayerRecord, Short> UI_STYLE_ALPHA = createField(DSL.name("UI_style_alpha"), SQLDataType.SMALLINT.defaultValue(DSL.inline("255", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>paradise_gamedb.player.be_role</code>.
     */
    public final TableField<PlayerRecord, String> BE_ROLE = createField(DSL.name("be_role"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_gamedb.player.default_slot</code>.
     */
    public final TableField<PlayerRecord, Short> DEFAULT_SLOT = createField(DSL.name("default_slot"), SQLDataType.SMALLINT.defaultValue(DSL.inline("1", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>paradise_gamedb.player.toggles</code>.
     */
    public final TableField<PlayerRecord, Integer> TOGGLES = createField(DSL.name("toggles"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_gamedb.player.toggles_2</code>.
     */
    public final TableField<PlayerRecord, Integer> TOGGLES_2 = createField(DSL.name("toggles_2"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_gamedb.player.toggles_3</code>.
     */
    public final TableField<PlayerRecord, Integer> TOGGLES_3 = createField(DSL.name("toggles_3"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_gamedb.player.sound</code>.
     */
    public final TableField<PlayerRecord, Integer> SOUND = createField(DSL.name("sound"), SQLDataType.INTEGER.defaultValue(DSL.inline("31", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_gamedb.player.light</code>.
     */
    public final TableField<PlayerRecord, Integer> LIGHT = createField(DSL.name("light"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("7", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_gamedb.player.glowlevel</code>.
     */
    public final TableField<PlayerRecord, Byte> GLOWLEVEL = createField(DSL.name("glowlevel"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_gamedb.player.volume_mixer</code>.
     */
    public final TableField<PlayerRecord, String> VOLUME_MIXER = createField(DSL.name("volume_mixer"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_gamedb.player.lastchangelog</code>.
     */
    public final TableField<PlayerRecord, String> LASTCHANGELOG = createField(DSL.name("lastchangelog"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("'0'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_gamedb.player.exp</code>.
     */
    public final TableField<PlayerRecord, String> EXP = createField(DSL.name("exp"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_gamedb.player.clientfps</code>.
     */
    public final TableField<PlayerRecord, Short> CLIENTFPS = createField(DSL.name("clientfps"), SQLDataType.SMALLINT.defaultValue(DSL.inline("100", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>paradise_gamedb.player.atklog</code>.
     */
    public final TableField<PlayerRecord, Short> ATKLOG = createField(DSL.name("atklog"), SQLDataType.SMALLINT.defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>paradise_gamedb.player.fuid</code>.
     */
    public final TableField<PlayerRecord, Long> FUID = createField(DSL.name("fuid"), SQLDataType.BIGINT.defaultValue(DSL.inline("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>paradise_gamedb.player.fupdate</code>.
     */
    public final TableField<PlayerRecord, Short> FUPDATE = createField(DSL.name("fupdate"), SQLDataType.SMALLINT.defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>paradise_gamedb.player.parallax</code>.
     */
    public final TableField<PlayerRecord, Byte> PARALLAX = createField(DSL.name("parallax"), SQLDataType.TINYINT.defaultValue(DSL.inline("8", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_gamedb.player.byond_date</code>.
     */
    public final TableField<PlayerRecord, LocalDate> BYOND_DATE = createField(DSL.name("byond_date"), SQLDataType.LOCALDATE.defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>paradise_gamedb.player.2fa_status</code>.
     */
    public final TableField<PlayerRecord, Player_2faStatus> _2FA_STATUS = createField(DSL.name("2fa_status"), SQLDataType.VARCHAR(14).nullable(false).defaultValue(DSL.inline("'DISABLED'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.gamedb.enums.Player_2faStatus.class), this, "");

    /**
     * The column <code>paradise_gamedb.player.screentip_mode</code>.
     */
    public final TableField<PlayerRecord, Byte> SCREENTIP_MODE = createField(DSL.name("screentip_mode"), SQLDataType.TINYINT.defaultValue(DSL.inline("8", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_gamedb.player.screentip_color</code>.
     */
    public final TableField<PlayerRecord, String> SCREENTIP_COLOR = createField(DSL.name("screentip_color"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.inline("'#ffd391'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_gamedb.player.ghost_darkness_level</code>.
     */
    public final TableField<PlayerRecord, UByte> GHOST_DARKNESS_LEVEL = createField(DSL.name("ghost_darkness_level"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("255", SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * The column <code>paradise_gamedb.player.colourblind_mode</code>.
     */
    public final TableField<PlayerRecord, String> COLOURBLIND_MODE = createField(DSL.name("colourblind_mode"), SQLDataType.VARCHAR(48).nullable(false).defaultValue(DSL.inline("'None'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_gamedb.player.keybindings</code>.
     */
    public final TableField<PlayerRecord, String> KEYBINDINGS = createField(DSL.name("keybindings"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_gamedb.player.server_region</code>.
     */
    public final TableField<PlayerRecord, String> SERVER_REGION = createField(DSL.name("server_region"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_gamedb.player.muted_adminsounds_ckeys</code>.
     */
    public final TableField<PlayerRecord, String> MUTED_ADMINSOUNDS_CKEYS = createField(DSL.name("muted_adminsounds_ckeys"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_gamedb.player.viewrange</code>.
     */
    public final TableField<PlayerRecord, String> VIEWRANGE = createField(DSL.name("viewrange"), SQLDataType.VARCHAR(5).nullable(false).defaultValue(DSL.inline("'19x15'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_gamedb.player.map_vote_pref_json</code>.
     */
    public final TableField<PlayerRecord, String> MAP_VOTE_PREF_JSON = createField(DSL.name("map_vote_pref_json"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private Player(Name alias, Table<PlayerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Player(Name alias, Table<PlayerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.player</code> table reference
     */
    public Player(String alias) {
        this(DSL.name(alias), PLAYER);
    }

    /**
     * Create an aliased <code>paradise_gamedb.player</code> table reference
     */
    public Player(Name alias) {
        this(alias, PLAYER);
    }

    /**
     * Create a <code>paradise_gamedb.player</code> table reference
     */
    public Player() {
        this(DSL.name("player"), null);
    }

    public <O extends Record> Player(Table<O> child, ForeignKey<O, PlayerRecord> key) {
        super(child, key, PLAYER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PLAYER_COMPUTERID, Indexes.PLAYER_FUID, Indexes.PLAYER_FUPDATE, Indexes.PLAYER_IP, Indexes.PLAYER_LASTSEEN);
    }

    @Override
    public Identity<PlayerRecord, Integer> getIdentity() {
        return (Identity<PlayerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayerRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlayerRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PLAYER_CKEY);
    }

    @Override
    public Player as(String alias) {
        return new Player(DSL.name(alias), this);
    }

    @Override
    public Player as(Name alias) {
        return new Player(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Player rename(String name) {
        return new Player(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Player rename(Name name) {
        return new Player(name, null);
    }
}
