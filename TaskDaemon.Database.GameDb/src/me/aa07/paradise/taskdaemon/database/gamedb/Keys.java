/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb;


import me.aa07.paradise.taskdaemon.database.gamedb.tables.Admin;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.AdminLog;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.AdminRanks;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Ban;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Changelog;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Characters;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.ConnectionLog;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Customuseritems;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Death;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Donators;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Feedback;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.InstanceDataCache;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Ip2group;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Ipintel;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.JsonDatumSaves;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.LegacyPopulation;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Library;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Memo;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Notes;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.OauthTokens;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.PaiSaves;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Player;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.PlaytimeHistory;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Privacy;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Round;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Tickets;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.VpnWhitelist;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Watch;
import me.aa07.paradise.taskdaemon.database.gamedb.tables._2faSecrets;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.AdminLogRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.AdminRanksRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.AdminRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.BanRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.ChangelogRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.CharactersRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.ConnectionLogRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.CustomuseritemsRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.DeathRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.DonatorsRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.FeedbackRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.InstanceDataCacheRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.Ip2groupRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.IpintelRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.JsonDatumSavesRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.LegacyPopulationRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.LibraryRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.MemoRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.NotesRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.OauthTokensRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.PaiSavesRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.PlayerRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.PlaytimeHistoryRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.PrivacyRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.RoundRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.TicketsRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.VpnWhitelistRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.WatchRecord;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records._2faSecretsRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * paradise_gamedb.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<_2faSecretsRecord> KEY_2FA_SECRETS_PRIMARY = Internal.createUniqueKey(_2faSecrets._2FA_SECRETS, DSL.name("KEY_2fa_secrets_PRIMARY"), new TableField[] { _2faSecrets._2FA_SECRETS.CKEY }, true);
    public static final UniqueKey<AdminRecord> KEY_ADMIN_PRIMARY = Internal.createUniqueKey(Admin.ADMIN, DSL.name("KEY_admin_PRIMARY"), new TableField[] { Admin.ADMIN.ID }, true);
    public static final UniqueKey<AdminLogRecord> KEY_ADMIN_LOG_PRIMARY = Internal.createUniqueKey(AdminLog.ADMIN_LOG, DSL.name("KEY_admin_log_PRIMARY"), new TableField[] { AdminLog.ADMIN_LOG.ID }, true);
    public static final UniqueKey<AdminRanksRecord> KEY_ADMIN_RANKS_PRIMARY = Internal.createUniqueKey(AdminRanks.ADMIN_RANKS, DSL.name("KEY_admin_ranks_PRIMARY"), new TableField[] { AdminRanks.ADMIN_RANKS.ID }, true);
    public static final UniqueKey<BanRecord> KEY_BAN_PRIMARY = Internal.createUniqueKey(Ban.BAN, DSL.name("KEY_ban_PRIMARY"), new TableField[] { Ban.BAN.ID }, true);
    public static final UniqueKey<ChangelogRecord> KEY_CHANGELOG_PRIMARY = Internal.createUniqueKey(Changelog.CHANGELOG, DSL.name("KEY_changelog_PRIMARY"), new TableField[] { Changelog.CHANGELOG.ID }, true);
    public static final UniqueKey<CharactersRecord> KEY_CHARACTERS_PRIMARY = Internal.createUniqueKey(Characters.CHARACTERS, DSL.name("KEY_characters_PRIMARY"), new TableField[] { Characters.CHARACTERS.ID }, true);
    public static final UniqueKey<ConnectionLogRecord> KEY_CONNECTION_LOG_PRIMARY = Internal.createUniqueKey(ConnectionLog.CONNECTION_LOG, DSL.name("KEY_connection_log_PRIMARY"), new TableField[] { ConnectionLog.CONNECTION_LOG.ID }, true);
    public static final UniqueKey<CustomuseritemsRecord> KEY_CUSTOMUSERITEMS_PRIMARY = Internal.createUniqueKey(Customuseritems.CUSTOMUSERITEMS, DSL.name("KEY_customuseritems_PRIMARY"), new TableField[] { Customuseritems.CUSTOMUSERITEMS.ID }, true);
    public static final UniqueKey<DeathRecord> KEY_DEATH_PRIMARY = Internal.createUniqueKey(Death.DEATH, DSL.name("KEY_death_PRIMARY"), new TableField[] { Death.DEATH.ID }, true);
    public static final UniqueKey<DonatorsRecord> KEY_DONATORS_PRIMARY = Internal.createUniqueKey(Donators.DONATORS, DSL.name("KEY_donators_PRIMARY"), new TableField[] { Donators.DONATORS.PATREON_NAME }, true);
    public static final UniqueKey<FeedbackRecord> KEY_FEEDBACK_PRIMARY = Internal.createUniqueKey(Feedback.FEEDBACK, DSL.name("KEY_feedback_PRIMARY"), new TableField[] { Feedback.FEEDBACK.ID }, true);
    public static final UniqueKey<InstanceDataCacheRecord> KEY_INSTANCE_DATA_CACHE_PRIMARY = Internal.createUniqueKey(InstanceDataCache.INSTANCE_DATA_CACHE, DSL.name("KEY_instance_data_cache_PRIMARY"), new TableField[] { InstanceDataCache.INSTANCE_DATA_CACHE.SERVER_ID, InstanceDataCache.INSTANCE_DATA_CACHE.KEY_NAME }, true);
    public static final UniqueKey<Ip2groupRecord> KEY_IP2GROUP_PRIMARY = Internal.createUniqueKey(Ip2group.IP2GROUP, DSL.name("KEY_ip2group_PRIMARY"), new TableField[] { Ip2group.IP2GROUP.IP }, true);
    public static final UniqueKey<IpintelRecord> KEY_IPINTEL_PRIMARY = Internal.createUniqueKey(Ipintel.IPINTEL, DSL.name("KEY_ipintel_PRIMARY"), new TableField[] { Ipintel.IPINTEL.IP }, true);
    public static final UniqueKey<JsonDatumSavesRecord> KEY_JSON_DATUM_SAVES_CKEY_UNIQUE = Internal.createUniqueKey(JsonDatumSaves.JSON_DATUM_SAVES, DSL.name("KEY_json_datum_saves_ckey_unique"), new TableField[] { JsonDatumSaves.JSON_DATUM_SAVES.CKEY, JsonDatumSaves.JSON_DATUM_SAVES.SLOTNAME }, true);
    public static final UniqueKey<JsonDatumSavesRecord> KEY_JSON_DATUM_SAVES_PRIMARY = Internal.createUniqueKey(JsonDatumSaves.JSON_DATUM_SAVES, DSL.name("KEY_json_datum_saves_PRIMARY"), new TableField[] { JsonDatumSaves.JSON_DATUM_SAVES.ID }, true);
    public static final UniqueKey<LegacyPopulationRecord> KEY_LEGACY_POPULATION_PRIMARY = Internal.createUniqueKey(LegacyPopulation.LEGACY_POPULATION, DSL.name("KEY_legacy_population_PRIMARY"), new TableField[] { LegacyPopulation.LEGACY_POPULATION.ID }, true);
    public static final UniqueKey<LibraryRecord> KEY_LIBRARY_PRIMARY = Internal.createUniqueKey(Library.LIBRARY, DSL.name("KEY_library_PRIMARY"), new TableField[] { Library.LIBRARY.ID }, true);
    public static final UniqueKey<MemoRecord> KEY_MEMO_PRIMARY = Internal.createUniqueKey(Memo.MEMO, DSL.name("KEY_memo_PRIMARY"), new TableField[] { Memo.MEMO.CKEY }, true);
    public static final UniqueKey<NotesRecord> KEY_NOTES_PRIMARY = Internal.createUniqueKey(Notes.NOTES, DSL.name("KEY_notes_PRIMARY"), new TableField[] { Notes.NOTES.ID }, true);
    public static final UniqueKey<OauthTokensRecord> KEY_OAUTH_TOKENS_PRIMARY = Internal.createUniqueKey(OauthTokens.OAUTH_TOKENS, DSL.name("KEY_oauth_tokens_PRIMARY"), new TableField[] { OauthTokens.OAUTH_TOKENS.TOKEN }, true);
    public static final UniqueKey<PaiSavesRecord> KEY_PAI_SAVES_CKEY = Internal.createUniqueKey(PaiSaves.PAI_SAVES, DSL.name("KEY_pai_saves_ckey"), new TableField[] { PaiSaves.PAI_SAVES.CKEY }, true);
    public static final UniqueKey<PaiSavesRecord> KEY_PAI_SAVES_PRIMARY = Internal.createUniqueKey(PaiSaves.PAI_SAVES, DSL.name("KEY_pai_saves_PRIMARY"), new TableField[] { PaiSaves.PAI_SAVES.ID }, true);
    public static final UniqueKey<PlayerRecord> KEY_PLAYER_CKEY = Internal.createUniqueKey(Player.PLAYER, DSL.name("KEY_player_ckey"), new TableField[] { Player.PLAYER.CKEY }, true);
    public static final UniqueKey<PlayerRecord> KEY_PLAYER_PRIMARY = Internal.createUniqueKey(Player.PLAYER, DSL.name("KEY_player_PRIMARY"), new TableField[] { Player.PLAYER.ID }, true);
    public static final UniqueKey<PlaytimeHistoryRecord> KEY_PLAYTIME_HISTORY_PRIMARY = Internal.createUniqueKey(PlaytimeHistory.PLAYTIME_HISTORY, DSL.name("KEY_playtime_history_PRIMARY"), new TableField[] { PlaytimeHistory.PLAYTIME_HISTORY.CKEY, PlaytimeHistory.PLAYTIME_HISTORY.DATE }, true);
    public static final UniqueKey<PrivacyRecord> KEY_PRIVACY_PRIMARY = Internal.createUniqueKey(Privacy.PRIVACY, DSL.name("KEY_privacy_PRIMARY"), new TableField[] { Privacy.PRIVACY.CKEY }, true);
    public static final UniqueKey<RoundRecord> KEY_ROUND_PRIMARY = Internal.createUniqueKey(Round.ROUND, DSL.name("KEY_round_PRIMARY"), new TableField[] { Round.ROUND.ID }, true);
    public static final UniqueKey<TicketsRecord> KEY_TICKETS_PRIMARY = Internal.createUniqueKey(Tickets.TICKETS, DSL.name("KEY_tickets_PRIMARY"), new TableField[] { Tickets.TICKETS.ID }, true);
    public static final UniqueKey<VpnWhitelistRecord> KEY_VPN_WHITELIST_PRIMARY = Internal.createUniqueKey(VpnWhitelist.VPN_WHITELIST, DSL.name("KEY_vpn_whitelist_PRIMARY"), new TableField[] { VpnWhitelist.VPN_WHITELIST.CKEY }, true);
    public static final UniqueKey<WatchRecord> KEY_WATCH_PRIMARY = Internal.createUniqueKey(Watch.WATCH, DSL.name("KEY_watch_PRIMARY"), new TableField[] { Watch.WATCH.CKEY }, true);
}
